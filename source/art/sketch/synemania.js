// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define([], function() {
    var NeutralParticle;
    emo$.art.sketch.Synemania = (function() {
      var angries, currentEmotionalState, currentParticles, currentText, dim, disgusties, fearies, happies, maxAngries, maxDisgusties, maxFearies, maxHappies, maxNeutrals, maxSaddies, maxSurprises, neutrals, palette, sadTheta, saddies, saturationFactor, surprises, syne;

      Synemania.serialVersionUID = '1L';

      dim = 400;

      maxHappies = 500;

      maxSaddies = 800;

      maxAngries = 800;

      maxSurprises = 100;

      maxFearies = 200;

      maxDisgusties = 800;

      maxNeutrals = 750;

      currentEmotionalState = new emo$.Engine.Emotion.EmotionalState();

      palette = new emo$.art.utils.SynesketchPalette('standard');

      syne = null;

      neutrals = new NeutralParticle[maxNeutrals];

      happies = new HappyParticle[maxHappies];

      saddies = new SadParticle[maxSaddies];

      angries = new AngryParticle[maxAngries];

      surprises = new SupriseParticle[maxSurprises];

      fearies = new FearParticle[maxFearies];

      disgusties = new DisgustParticle[maxDisgusties];

      currentParticles = [];

      sadTheta = null;

      saturationFactor = '1.0f';

      currentText = null;

      function Synemania(dim) {
        this.dim = dim;
        Synemania.__super__.constructor.call(this);
      }

      Synemania.prototype.setup = function() {
        var e, x, _i, _j, _k, _l, _m, _n, _o, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
        size(dim, dim, P3D);
        background(255);
        noStroke();
        for (x = _i = 0, _ref = maxNeutrals - 1; _i < _ref; x = _i += 1) {
          neutrals[x] = new NeutralParticle();
        }

        /*for x in [0...maxSaddies-1] by 1
          saddies[x] = new SadParticle()
        
        for x in [0...maxHappies-1] by 1
          happies[x] = new HappyParticle()
        
        for x in [0...maxAngries-1] by 1
          angries[x] = new AngryParticle()
        
        for x in [0...maxSurprises-1] by 1
          surprises[x] = new SupriseParticle()
        
        for x in [0...maxFearies-1] by 1
          fearies[x] = new FearParticle()
        
        for x in [0...maxDisgusties-1] by 1
          disgusties[x] = new DisgustParticle()
         */
        for (x = _j = 0, _ref1 = maxSaddies - 1; _j < _ref1; x = _j += 1) {
          saddies[x] = new NeutralParticle();
        }
        for (x = _k = 0, _ref2 = maxHappies - 1; _k < _ref2; x = _k += 1) {
          happies[x] = new NeutralParticle();
        }
        for (x = _l = 0, _ref3 = maxAngries - 1; _l < _ref3; x = _l += 1) {
          angries[x] = new NeutralParticle();
        }
        for (x = _m = 0, _ref4 = maxSurprises - 1; _m < _ref4; x = _m += 1) {
          surprises[x] = new NeutralParticle();
        }
        for (x = _n = 0, _ref5 = maxFearies - 1; _n < _ref5; x = _n += 1) {
          fearies[x] = new NeutralParticle();
        }
        for (x = _o = 0, _ref6 = maxDisgusties - 1; _o < _ref6; x = _o += 1) {
          disgusties[x] = new NeutralParticle();
        }
        sadTheta = random(TWO_PI);
        currentParticles = neutrals;
        try {
          return syne = new SynesthetiatorEmotion(this);
        } catch (_error) {
          e = _error;
          return e.printStackTrace();
        }
      };

      Synemania.prototype.synesketchUpdate = function(state) {
        currentEmotionalState = state;
        return currentParticles = getCurrentParticles(currentEmotionalState.getStrongestEmotion());
      };

      Synemania.prototype.draw = function() {
        var numberOfParticles, strongest, weight, x, _i, _results;
        strongest = currentEmotionalState.getStrongestEmotion();
        weight = strongest.getWeight();
        saturationFactor = Math.sqrt(weight);
        numberOfParticles = Math.round(currentParticles.length * saturationFactor);
        _results = [];
        for (x = _i = 0; _i < numberOfParticles; x = _i += 1) {
          _results.push(currentParticles[x].move());
        }
        return _results;
      };

      Synemania.prototype.getCurrentParticles = function(e) {
        var currentEmotion;
        currentEmotion = e.getType();
        if (currentEmotion === emo$.Engine.Emotion.Emotion.HAPPINESS) {
          return happies;
        } else if (currentEmotion === emo$.Engine.Emotion.Emotion.SADNESS) {
          return saddies;
        } else if (currentEmotion === emo$.Engine.Emotion.Emotion.ANGER) {
          return angries;
        } else if (currentEmotion === emo$.Engine.Emotion.Emotion.FEAR) {
          return fearies;
        } else if (currentEmotion === emo$.Engine.Emotion.Emotion.DISGUST) {
          return disgusties;
        } else if (currentEmotion === emo$.Engine.Emotion.Emotion.SURPRISE) {
          return surprises;
        } else {
          return neutrals;
        }
      };

      Synemania.prototype.saturate = function(color) {
        colorMode(HSB, '1.0f');
        color = color(hue(color), saturation(color) * '0.98f', brightness(color));
        colorMode(RGB, 255);
        return color;
      };

      return Synemania;

    })();

    /*
     Classes which describe emotion-specific particles, that is visual representation of each emotion.
     */
    emo$.art.sketch.Particle = (function() {
      var color, speed, speedD, theta, thetaD, thetaDD, vx, vy, x, y;

      color = null;

      x = null;

      y = null;

      vx = null;

      vy = null;

      theta = null;

      speed = null;

      speedD = null;

      thetaD = null;

      thetaDD = null;

      function Particle() {
        x = dim / 2;
        y = dim / 2;
      }

      Particle.prototype.collide = function() {
        throw 'abstract';
      };

      Particle.prototype.move = function() {
        throw 'abstract';
      };

      return Particle;

    })();
    return NeutralParticle = (function(_super) {
      var gray;

      __extends(NeutralParticle, _super);

      gray = null;

      function NeutralParticle() {
        NeutralParticle.__super__.constructor.call(this);
        gray = Math.floor(Math.random() * 255);
      }

      NeutralParticle.prototype.collide = function() {
        var speed, speedD, theta, thetaD, thetaDD, x, y, _results;
        x = dim / 2;
        y = dim / 2;
        theta = random(TWO_PI);
        speed = random('0.5f', '3.5f');
        speedD = random('0.996f', '1.001f');
        thetaD = 0;
        thetaDD = 0;
        _results = [];
        while (abs(thetaDD) < 0.00001) {
          _results.push(thetaDD = random('-0.001f', '0.001f'));
        }
        return _results;
      };

      NeutralParticle.prototype.move = function() {
        var vx, vy, x, y;
        stroke(gray, 28);
        point(x, y - 1);
        x += vx;
        y += vy;
        vx = speed * sin(theta);
        vy = speed * cos(theta);
        if (random(1000) > 990) {
          x = dim / 2;
          y = dim / 2;
          collide();
        }
        if ((x < -dim) || (x > dim * 2) || (y < -dim) || (y > dim * 2)) {
          x = dim / 2;
          y = dim / 2;
          return collide();
        }
      };

      return NeutralParticle;

    })(Particle);
  });

}).call(this);

//# sourceMappingURL=synemania.map
